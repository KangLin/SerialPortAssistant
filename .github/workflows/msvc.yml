name: msvc

on: [push]

jobs:
  use_install_qt:
    name: ${{ matrix.os }}-qt${{matrix.qt_version}}-${{matrix.vc_version}}-${{matrix.vc_arch}}-${{matrix.BUILD_TYPE}}

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        os: [windows-2019]
        qt_version: [6.2.4, 5.15.2, 5.12.12]
        include:
          - qt_version: 6.2.4
            qt_arch: win64_msvc2019_64
            qt_modules: qtscxml qtserialport
            vc_version: 2019
            vc_arch: amd64

          - qt_version: 5.15.2
            qt_arch: win64_msvc2019_64
            vc_version: 2019
            vc_arch: amd64

          - qt_version: 5.12.12
            qt_arch: win32_msvc2017
            vc_version: 2019
            vc_arch: x86

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    runs-on: ${{ matrix.os }}

    env:
      SerialPortAssistant_VERSION: v0.5.12
      qt_modules: qtwebengine ${{matrix.qt_modules}}
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}
      
    steps:
    - uses: actions/checkout@v2
 
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1  # not v2!
      with:
        path: ${{env.TOOSL_DIR}}/qt
        key: SerialPortAssistant_msvc_qt-${{matrix.qt_arch}}-qt${{matrix.qt_version}}
    
    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
      uses: jurplel/install-qt-action@v3.0.0
      with:
        # Directory to install Qt
        dir: ${{env.TOOSL_DIR}}/qt # optional
        # Version of Qt to install
        version: ${{matrix.qt_version}} # optional, default is 5.15.2
        # Host platform
        #host: linux # optional
        # Target platform for build
        #target: desktop # optional, default is desktop
        # Architecture for Windows/Android
        arch: ${{matrix.qt_arch}} # optional
        # Whether or not to install Qt dependencies on Linux
        #install-deps: true # optional, default is true
        # Additional Qt modules to install
        modules: ${{env.qt_modules}} # optional. see: https://ddalcino.github.io/aqt-list-server/
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        cached: ${{ steps.cache-qt.outputs.cache-hit }} # optional, default is false
        # Whether or not to automatically run setup-python to find a valid python version.
        #setup-python: false # optional, default is true
        # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
        #tools: # optional
        # Whether or not to actually install Qt or just the tools from the tools argument
        #tools-only: false # optional, default is false
        # Version of aqtinstall to use in case of issues
        #aqtversion: # optional, default is ==0.10.0
        # Version of py7zr to use in case of issues
        #py7zrversion: # optional, default is ==0.11.0
        # Any extra arguments to append to the back
        #extra: # optional

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{github.workspace}}/build

    - name: git clone RabbitCommon
      working-directory: ${{github.workspace}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.vc_arch }}
        vsversion: ${{ matrix.vc_version }}

    - name: build SerialPortAssistant
      shell: cmd
      working-directory: ${{github.workspace}}/build
      env:
        RabbitCommon_DIR: ${{github.workspace}}/RabbitCommon
      run: |
        qmake ${{github.workspace}}/SerialPortAssistant.pro CONFIG*=${{matrix.BUILD_TYPE}} RabbitCommon_DIR=${{env.RabbitCommon_DIR}} prefix=${{github.workspace}}/build/install
        nmake install
        makensis Install.nsi

    - name: Package 
      uses: actions/upload-artifact@v2
      with:
        name: SerialPortAssistant_${{env.SerialPortAssistant_VERSION}}
        path: |
          ${{github.workspace}}/build/SerialPortAssistant_Setup_${{env.SerialPortAssistant_VERSION}}.exe
          #${{github.workspace}}/build/update_*.xml

#    - name: Upload To Github Release
#      if: ${{ matrix.BUILD_TYPE == 'Release' && '5.12.12' == matrix.qt_version && startsWith(github.ref, 'refs/tags/') }}
#      uses: softprops/action-gh-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        prerelease: true
##        body: |
##           [:cn: 修改日志](ChangeLog_zh_CN.md) [:us: Change log](ChangeLog.md)
#        files: |
#          ${{github.workspace}}\build\SerialPortAssistant_Setup_${{env.SerialPortAssistant_VERSION}}.exe
#          ${{github.workspace}}\build\update_windows.xml
#    
